isopolygons
===========

.. py:module:: isopolygons

.. autoapi-nested-parse::

   This module provides functionality for calculating isopolygons around facilities using different methods and services.

   An isopolygon represents the area that can be reached within a specific distance (isodistance) or time (isochrone) from a facility.

   The module contains an abstract base class IsopolygonCalculator and its implementations.

   .. note::

      To implement a new way of calculating isopolygons (e.g., using Google Maps),
      create a class that inherits from IsopolygonCalculator and implements calculate_isopolygons.



Attributes
----------

.. autoapisummary::

   isopolygons.logger


Classes
-------

.. autoapisummary::

   isopolygons.IsopolygonCalculator
   isopolygons.OsmIsopolygonCalculator
   isopolygons.OsmIsopolygonCalculatorAlternative
   isopolygons.MapboxIsopolygonCalculator


Module Contents
---------------

.. py:data:: logger

.. py:class:: IsopolygonCalculator(facilities_df: pandas.DataFrame, distance_type: str, distance_values: int | list[int])

   Bases: :py:obj:`abc.ABC`


   Abstract base class for isopolygon calculation.


   .. py:attribute:: facilities_df


   .. py:attribute:: distance_type


   .. py:attribute:: distance_values


   .. py:method:: _validate_facilities_df_format(facilities_df: pandas.DataFrame) -> pandas.DataFrame
      :staticmethod:


      Checks that facilities_df has columns "longitude and latitude, and
      has one or more rows



   .. py:method:: _validate_distance_values_are_ints(distance_values) -> list[int]
      :staticmethod:


      Ensures that distance_values are in the correct format for calculating isopolygons.
      It converts single integer inputs into a list format.

      The requirement that all distance_values be integers comes from the Mapbox Isochrone API.

      :param distance_values: Either a single integer or a list of integers representing
                              distances for isopolygon calculations.
      :type distance_values: int | list[int]

      :returns:

                A list containing the validated distance values. If input was a single integer,
                    returns a single-element list.
      :rtype: list[int]

      :raises TypeError: If distance_values is neither an integer nor a list of integers.
      :raises TypeError: If any element in the distance_values list is not an integer.



   .. py:method:: _validate_distance_upper_limits() -> None

      Checks that distance_values are within the permitted limits:
      100.000 meters for length and 60 minutes for time. This is requested by
      the Mapbox Isochrone API.



   .. py:method:: calculate_isopolygons() -> pandas.DataFrame
      :abstractmethod:


      Must be implemented in subclasses



.. py:class:: OsmIsopolygonCalculator(facilities_df: pandas.DataFrame, distance_type: str, distance_values: list[int], road_network: networkx.MultiDiGraph, node_buffer: float = 0.001, edge_buffer: float = 0.0005)

   Bases: :py:obj:`IsopolygonCalculator`


   This implementation of IsopolygonCalculator uses OpenStreetMap data to calculate isopolygons.


   .. py:attribute:: road_network


   .. py:attribute:: node_buff
      :value: 0.001



   .. py:attribute:: edge_buff
      :value: 0.0005



   .. py:attribute:: nearest_nodes_dict


   .. py:method:: calculate_isopolygons() -> pandas.DataFrame

      Calculates isopolygons for each facility at different distances (distance_values).

      An isopolygon represents the area that can be reached within a specific distance/time from a facility
      using the road network.

      N.B.: distances will be computed with respect to the nearest node to the facility,
      not the facility itself.



   .. py:method:: _add_buffer_to_isopolygon_skeleton(nodes_gdf: geopandas.GeoSeries, edges_gdf: geopandas.GeoSeries, node_buffer: float, edge_buffer: float) -> shapely.Polygon
      :staticmethod:


      The nodes and edges form the "skeleton" of the isopolygon. This function turns that skeleton into
      a polygon by buffering and merging the geometries of the nodes and edges.

      :returns: A polygon representing the merged buffer zones
      :rtype: shapely.geometry.Polygon

      :raises ValueError: If edge_buffer is less than or equal to 0
      :raises AttributeError: If the unary_union results in two (or more) disconnected polygons

      .. rubric:: Notes

      - The function is sensitive to buffer size values. If they are too large relative to the distances between
      nodes, the buffer could be so large that unintended areas are included by mistake (like nodes that had been
      previously excluded).
      - Input geometries should be in a projected CRS, not geographic CRS, to ensure
        accurate buffer calculations.



   .. py:method:: _get_skeleton_nodes_and_edges(road_network: networkx.MultiDiGraph, center_node: int, distance_value: int, distance_type: str) -> tuple[geopandas.GeoSeries, geopandas.GeoSeries]
      :staticmethod:


      Get nodes and edges within a specified distance from a certain node in a road network.
      This will be the "skeleton" of the isopolygon.

      :param road_network: The road network.
      :type road_network: nx.MultiDiGraph
      :param center_node: The node from which to measure the distance.
      :type center_node: int
      :param dist_value: The distance value.
      :type dist_value: int
      :param distance_type: The type of distance (e.g., 'length').
      :type distance_type: str

      :returns: a GeoSeries of the nodes with their osmid and geometry.
                edges_gdf: a GeoSeries of the geometry of the edges.
      :rtype: nodes_gdf

      .. rubric:: Notes

      If an edge (u,v) doesn't have geometry data in the road_network, edges_gdf contains
      a straight line from u to v.

      If no edges are found (for example, if all other nodes are too far away from center_node),
      edges_gdf is an empty dataframe.



.. py:class:: OsmIsopolygonCalculatorAlternative(facilities_df: pandas.DataFrame, distance_type: str, distance_values: list[int], road_network: networkx.MultiDiGraph, buffer: float = 100)

   Bases: :py:obj:`IsopolygonCalculator`


   This implementation of IsopolygonCalculator uses OpenStreetMap data to calculate isopolygons.


   .. py:attribute:: road_network


   .. py:attribute:: buffer
      :value: 100



   .. py:attribute:: nearest_nodes_dict


   .. py:method:: calculate_isopolygons() -> pandas.DataFrame

      Calculate isopolygons for each facility at different distances (distance_values).

      An isopolygon represents the area that can be reached within a specific distance/time from a facility
      using the road network.

      N.B.: distances will be computed with respect to the nearest node to the facility,
      not the facility itself.




   .. py:method:: _get_skeleton_nodes_and_edges(road_network: networkx.MultiDiGraph, center_node: int, distance_value: int, distance_type: str)
      :staticmethod:


      Get nodes and edges within distance_value from a node in the road network, and return
      the union of their geometries. This will be the "skeleton" of the isopolygon.

      :param road_network: The road network.
      :type road_network: nx.MultiDiGraph
      :param center_node: The node from which to measure the distance.
      :type center_node: int
      :param distance_value: The distance value.
      :type distance_value: int
      :param distance_type: The type of distance (e.g., 'length').
      :type distance_type: str

      :returns: The union of the geometries of the nodes and edges within the specified distance from center_node.



.. py:class:: MapboxIsopolygonCalculator(facilities_df: pandas.DataFrame, distance_type: str, distance_values: list[int], mode_of_transport: str, mapbox_api_token: str, base_url: str = 'https://api.mapbox.com/isochrone/v1/')

   Bases: :py:obj:`IsopolygonCalculator`


   From Mapbox docs: When you provide geographic coordinates to a Mapbox API,
   they should be formatted in the order longitude, latitude and specified as decimal degrees
   in the WGS84 coordinate system. This pattern matches existing standards, including GeoJSON and KML.
   Mapbox APIs use GeoJSON formatting wherever possible to represent geospatial data.


   .. py:attribute:: mapbox_api_token


   .. py:attribute:: route_profile


   .. py:attribute:: distance_values


   .. py:attribute:: base_url
      :value: 'https://api.mapbox.com/isochrone/v1/'



   .. py:attribute:: contour_type
      :value: 'contours_meters'



   .. py:method:: calculate_isopolygons() -> pandas.DataFrame

      Calculates isopolygons for all facilities using Mapbox API.

      This method generates isopolygons (polygons of equal distance/time) for each facility
      using the Mapbox Isochrone API.

      :returns:

                A pandas DataFrame where:
                    - Each row represents a facility
                    - Each column represents a distance value prefixed with "ID_"
                    - Each cell contains the corresponding isopolygon geometry
      :rtype: Dataframe

      .. note::

         - Requires valid Mapbox API credentials
         - Subject to Mapbox API rate limits (300 requests per minute)
         - Uses the distance values specified in self.distance_values



   .. py:method:: _build_request_url(longitude: float, latitude: float) -> str

      Builds the Mapbox API request URL for isopolygon calculation.



   .. py:method:: _handle_rate_limit(request_count: int) -> None

      Handles Mapbox API rate limiting, a maximum of 300 requests per minute.



   .. py:method:: _fetch_isopolygons(request_url: str) -> list

      Makes a GET request to the Mapbox Isochrone API endpoint and handles various potential errors.

      :param request_url: The complete URL for the Mapbox Isochrone API request.
      :type request_url: str

      :returns: GeoJSON Feature object.
      :rtype: list

      :raises ValueError: If the Mapbox access token is invalid (401 error).
      :raises PermissionError: If the token lacks permission to access the resource (403 error).
      :raises requests.exceptions.HTTPError: For other HTTP-related errors.
      :raises TimeoutError: If the request times out (>60 seconds).
      :raises RuntimeError: For unexpected errors during the API request.



   .. py:method:: _validate_mapbox_distance_values(distance_values: list[int]) -> list[int]
      :staticmethod:


      Checks if distance_values meet Mapbox API requirements:
      a maximum of 4 values in increasing order.

      :param distance_values: List of integer distances to validate
      :type distance_values: list[int]

      :returns: Sorted list of distance values
      :rtype: list[int]

      :raises ValueError: If more than 4 distance values are provided



   .. py:method:: _validate_mapbox_token_not_empty(mapbox_api_token: str) -> str
      :staticmethod:



