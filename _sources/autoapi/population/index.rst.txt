population
==========

.. py:module:: population


Classes
-------

.. autoapisummary::

   population.Population
   population.FacebookPopulation
   population.WorldpopPopulation


Module Contents
---------------

.. py:class:: Population

   Bases: :py:obj:`abc.ABC`


   Abstract base class for Population. Subclasses must implement the method get_population_data()
   If you want to add new data source (e.g. geojson): create new subclass with method get_population_data().


   .. py:attribute:: admin_area_boundaries
      :type:  shapely.Polygon | shapely.MultiPolygon


   .. py:attribute:: iso3_country_code
      :type:  str


   .. py:attribute:: population_resolution
      :type:  int
      :value: 5



   .. py:method:: get_population_gdf() -> geopandas.GeoDataFrame

      Integrates the methods to get the population numbers for the selected area into one flow and
      returns grouped population data for the admin area as a GeoDataFrame.



   .. py:method:: _group_population(population_df: pandas.DataFrame, population_resolution: int) -> geopandas.GeoDataFrame
      :staticmethod:


      Group population data by longitude and latitude based on the population resolution. The population resolution
      is an integer that indicates the number of digits after the decimal point to which latitude and longitude get rounded
      and then grouped. The population of all rows with the same unique combination of latitude and longitude after
      rounding by population resolution is summed. The resulting dataframe is returned as a GeoDataFrame.



   .. py:method:: _get_population_df() -> pandas.DataFrame
      :abstractmethod:


      Must be implemented in subclasses



.. py:class:: FacebookPopulation

   Bases: :py:obj:`Population`


   Abstract base class for Population. Subclasses must implement the method get_population_data()
   If you want to add new data source (e.g. geojson): create new subclass with method get_population_data().


   .. py:method:: _get_population_df() -> pandas.DataFrame

      Download & process data from the chosen datasource 'facebook'. Returns a DataFrame with population data.



   .. py:method:: download_population_facebook(iso3_country_code: str) -> pandas.DataFrame
      :staticmethod:


      Download population data from 2020 from facebook for a country defined by the iso3_country_code.



   .. py:method:: process_population_facebook(downloaded_data: pandas.DataFrame, iso3_country_code: str, admin_area_boundaries: shapely.Polygon | shapely.MultiPolygon) -> pandas.DataFrame
      :staticmethod:


      Create geodataframe, clip with admin area boundaries to keep only those areas inside the admin area boundaries
      and convert back to pandas dataframe



.. py:class:: WorldpopPopulation

   Bases: :py:obj:`Population`


   Abstract base class for Population. Subclasses must implement the method get_population_data()
   If you want to add new data source (e.g. geojson): create new subclass with method get_population_data().


   .. py:method:: _get_population_df() -> pandas.DataFrame

      Download & process data from the chosen datasource 'worldpop'. Returns a DataFrame with population data.



   .. py:method:: download_population_worldpop(iso3_country_code: str) -> str
      :staticmethod:


      Download population numbers from worldpop from last year for a country defined by the iso3_country_code.



   .. py:method:: process_population_worldpop(file_path: str, admin_area_boundaries: shapely.Polygon | shapely.MultiPolygon) -> pandas.DataFrame
      :staticmethod:


      Processes the downloaded worldpop data raster file into the required format of a dataframe of longitude, latitude
      and statistical population count

      Function takes the bounds of the raster file in the raster_fpath, draws an evenly spaced sequence of points between
      the xmin & xmax, and between ymin & ymax, and then generates a grid to cover the complete square area inside the
      boundaries. The population count for each point in the grid that falls within the given MultiPolygon area
      (identified by the mask) is extracted from the raster file, and a dataframe with latitude, longitude & population
      count for each point in the raster is returned.



   .. py:method:: get_admarea_mask(vector_polygon: shapely.Polygon | shapely.MultiPolygon, raster_layer: rasterio.DatasetReader) -> numpy.ndarray
      :staticmethod:


      Extract mask from raster for a given MultiPolygon

      Return a boolean mask for the raster layer which is True where the (multi)polygon is located and false for all
      points outside the given (Multi)Polygon



